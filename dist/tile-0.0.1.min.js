define([ "jQuery", "Underscore", "Backbone" ], function(a, b, c) {
    var d = window.Tile = {
        Views: {}
    };
    d.JOB_RENDER = JOB_RENDER = 1, d.JOB_PRUNE = JOB_PRUNE = 2, d.JOB_PRESIZE = JOB_PRESIZE = 4, 
    d.JOB_TRACE = JOB_TRACE = 8, d.FLOW_LOCAL = FLOW_LOCAL = 1, d.FLOW_SUPER = FLOW_SUPER = 2, 
    d.FLOW_SIZED = FLOW_SIZED = 4, d.FLOW_STYLED = FLOW_STYLED = 8, d.FLOW_RENDERED = FLOW_RENDERED = 16, 
    d.FLOW_ADDED = FLOW_ADDED = 32, d.FLOW_MEASURED = FLOW_MEASURED = 64, d.FLOW_VIEWS = FLOW_VIEWS = 128, 
    d.FLOW_TRACED = FLOW_TRACED = 256, d.SUPER_ADDED = SUPER_ADDED = FLOW_SUPER + FLOW_ADDED, 
    d.STYLED_ADDED = STYLED_ADDED = FLOW_STYLED + FLOW_ADDED, d.RENDERED_ADDED = RENDERED_ADDED = FLOW_RENDERED + FLOW_ADDED, 
    d.SUPER_ADDED_RENDERED_SIZED = SUPER_ADDED_RENDERED_SIZED = SUPER_ADDED + FLOW_RENDERED + FLOW_SIZED, 
    STRING_BOOLEAN = {
        "false": !1,
        no: !1,
        off: !1,
        "null": !1,
        nill: !1,
        "true": !0,
        yes: !0,
        on: !0
    };
    var e = [ "el", "id", "attributes", "className", "tagName", "events" ], f = Math.abs, g = (Math.round, 
    Math.floor, Array.prototype.slice);
    BIG = 1e5, emptyStr = function(a) {
        return "                                       ".slice(-a);
    }, stopEvent = function(a) {
        a.cancelBubble = !0, a.stopPropagation && a.stopPropagation();
    }, textSelection = function(b) {
        a(document)[b ? "unbind" : "bind"]("selectstart", function() {
            return !1;
        }).css("MozUserSelect", b ? "" : "none"), document.unselectable = b ? "off" : "on";
    }, classify = function(a) {
        return a || (a = ""), a.replace(/_/g, " ").replace(/(?:^|\s)\S/g, function(a) {
            return a.toUpperCase();
        }).replace(/\s/g, "");
    }, d.filters = {}, d.filters["boolean"] = function() {
        return {
            input: function(a) {
                return b.isString(a) ? STRING_BOOLEAN[a.loLowerCase()] : a ? !0 : !1;
            }
        };
    }, d.filters.string = function() {
        return {
            input: function(a) {
                return "" + a;
            }
        };
    }, d.filters.integer = function() {
        return {
            input: function(a) {
                return b.isString(a) ? parseInt(a, 10) : b.isNumber(a) ? a : void 0;
            }
        };
    }, d.filters.options = function(a) {
        var c = a.options, d = !1;
        return b.isString(c) && (c = c.split(",")), b.isArray(c) && (c = b.object(c, c), 
        d = !0), {
            input: function(a) {
                return void 0 !== a && (b.isString(a) && (a = a.toLowerCase()), a = c[a]), a;
            },
            output: function(a) {
                if (!d) for (var b in c) if (c[b] == a) return b;
                return a;
            }
        };
    }, d.adapters = {}, d.adapters.options = function(a) {
        return {
            setter: function(b) {
                this.options[a.name] = b;
            },
            getter: function() {
                return this.options[a.name];
            }
        };
    }, d.adapters.property = function(a) {
        return {
            setter: function(b) {
                this[a.name] = b;
            },
            getter: function() {
                return this[a.name];
            }
        };
    }, d.adapters.setter = function(a) {
        var c = a.name, d = a.setter || "set" + classify(c), e = a.getter || "get" + classify(c);
        return {
            setter: b.isFunction(d) ? d : function(a) {
                var c = this[d];
                b.isFunction(c) ? c.call(this, a) : b.isObject(c) && c.set(a);
            },
            getter: b.isFunction(e) ? e : function() {
                var a = this[e];
                b.isFunction(a) ? a.call(this) : b.isObject(a) && a.get();
            }
        };
    }, d.Schema = function(a, c) {
        function e(a, c) {
            return d.Schema(b.extend({}, l, a), b.extend({}, m, c));
        }
        function f(a, b) {
            for (var c in a) g(c, a[c], b);
        }
        function g(a, b, c) {
            var e, f, g, h = b.adapter || "options", i = d.adapters[h];
            b !== !1 && (b._bound ? g = b : (b.name = a, g = {
                _bound: !0,
                name: a,
                flowFlags: b.flowFlags || 0,
                flowJobs: b.flowJobs || 0,
                isPrivate: b.isPrivate ? !0 : !1,
                defaultValue: b.defaultValue
            }, b.filter && (e = d.filters[b.filter]) && (f = e(b), g.filter = b.filter, b.input || (g.input = f.input), 
            b.output || (g.output = f.output)), b.adapter || (b.adapter = "options"), i || console.error("Adapter " + h + " on schema.option." + a), 
            f = i(b), g.setter = f.setter, g.getter = f.getter), (c ? m : l)[a] = g);
        }
        function h(a, b) {
            var c, d = a.parentView, e = d ? d.optionSchema.child : null, f = 0;
            for (var g in b) {
                var h = b[g];
                a.options[g] != h && ((c = l[g]) ? f += k(a, c, h) : e && (c = e[g]) ? f += k(a, c, h) : a.optionBuffer[g] = h);
            }
            return f;
        }
        function i() {}
        function j(a, b) {
            var c, d, e, f = a.options, g = a.optionBuffer, h = b ? a.parentView : null, i = b ? h.optionSchema.child : l;
            for (c in i) e = i[c], void 0 !== (d = g[c]) ? (k(a, e, d), delete g[c]) : void 0 === f[c] && void 0 !== (d = e.defaultValue) && k(a, e, d, !0);
        }
        function k(a, b, c, e) {
            var f, g, h;
            return !e && (f = b.input) && (c = f(c)), b.setter.call(a, c), (g = b.flowFlags) && (a.flowFlags |= g), 
            (h = b.flowJobs) && d.reflow.schedule(h, a, !0), 1;
        }
        var l = {}, m = {};
        return f(a), f(c, !0), {
            extend: e,
            addBindings: f,
            addBinding: g,
            initOptions: j,
            setOptions: h,
            getOptions: i,
            local: l,
            child: m
        };
    }, d.reflow = function() {
        function a() {
            i++;
        }
        function c(a) {
            i--, a || f();
        }
        function e(a, b, c) {
            b.flowJobs & a || (b.flowJobs |= a, k[a].jobs.push(b), j++), c || f();
        }
        function f() {
            if (!i && !h && j) {
                for (h = 3; h-- && j; ) {
                    for (var a in k) g(a, k[a]);
                    (d.root.flowViews || d.root.flowFlags) && d.root.flow();
                }
                h || console.error("Reflow Dispatch Cycle Overflow"), h = 0, b.defer(function() {});
            }
        }
        function g(a, b) {
            var c = b.jobs, d = b.method;
            if (c.length) {
                for (var e = 0; e < c.length; e++, j--) {
                    var f = c[e];
                    f[d](), f.flowJobs &= ~a;
                }
                b.jobs = [];
            }
        }
        var h = 0, i = 0, j = 0, k = {};
        return k[JOB_RENDER] = {
            jobs: [],
            method: "renderView"
        }, k[JOB_PRUNE] = {
            jobs: [],
            method: "pruneView"
        }, k[JOB_PRESIZE] = {
            jobs: [],
            method: "presizeView"
        }, k[JOB_TRACE] = {
            jobs: [],
            method: "traceView"
        }, {
            block: a,
            unblock: c,
            schedule: e,
            dispatch: f
        };
    }(), d.dom = function() {
        function a() {
            i = {}, localStorage.setItem(h, void 0);
        }
        function b() {
            var a = JSON.stringify(i);
            localStorage.setItem(h, a);
        }
        function c() {
            var a = localStorage.getItem(h);
            i = a ? JSON.parse(a) : {};
        }
        function d(a) {
            return {
                innerWidth: a.el.scrollWidth,
                innerHeight: a.el.scrollHeight
            };
        }
        function e(a) {
            return {
                innerWidth: a.$el.width(),
                innerHeight: a.$el.height()
            };
        }
        function f(a, b) {
            return i[b] || (i[b] = g(a.$el));
        }
        function g(a) {
            var b = a.width(), c = a.outerWidth(!0), d = a.height(), e = a.outerHeight(!0);
            return {
                padWidth: c - b,
                padHeight: e - d
            };
        }
        var h = null, i = {};
        return {
            padSize: f,
            innerSize: e,
            scrollSize: d,
            loadCache: c,
            saveCache: b,
            clearCache: a
        };
    }();
    var h = d.Dragdrop = function(b) {
        var c = a(b.target), d = c.closest(".tile"), e = d.data("tile");
        for (this.tile = c[0] == d[0] ? e : c, this.origin = e, this.target = c, this.startX = b.pageX, 
        this.startY = b.pageY, this.zones = []; e && !e.dragInit(b, this); ) e = e.parentView;
        e && (this.handler = e, textSelection(!1));
    };
    return h.prototype = {
        tile: null,
        autodrag: !0,
        copyable: !1,
        dropable: !0,
        restorable: !0,
        pxtodrag: 2,
        handler: null,
        origin: null,
        target: null,
        startX: 0,
        startY: 0,
        deltaX: 0,
        deltaY: 0,
        tileX: 0,
        tileY: 0,
        pageX: 0,
        pageY: 0,
        dropX: 0,
        dropY: 0,
        dropWidth: 0,
        dropHeight: 0,
        dropTop: 0,
        dropLeft: 0,
        started: !1,
        committed: !1,
        zones: null,
        zone: null,
        start: function(a, b) {
            return f(this.startX - b.pageX) > this.pxtodrag || f(this.startY - b.pageY) > this.pxtodrag ? (this.autodrag && (this.tile = this.prepTile(a, this.tile)), 
            this.dropable && this.zoneInit.call(a, b, this), a.set("cover", "move"), this.handler.dragStart(b, this), 
            !0) : !1;
        },
        move: function(a, b) {
            (this.started || (this.started = this.start(a, b))) && (this.pageX = b.pageX, this.pageY = b.pageY, 
            this.deltaX = b.pageX - this.startX, this.deltaY = b.pageY - this.startY, this.inZone(this.zone, b.pageX, b.pageY) || (this.zone = this.changeZone(b), 
            this.zone.drop && (this.dropLeft = this.zone.drop.l, this.dropTop = this.zone.drop.t, 
            this.dropWidth = this.zone.drop.r - this.dropLeft, this.dropHeight = this.zone.drop.b - this.dropTop)), 
            this.handler.dragMove(b, this), this.zone.tile && (this.dropX = this.pageX - this.zone.drop.l, 
            this.dropY = this.pageY - this.zone.drop.t, this.zone.tile.dropMove(b, this)), this.autodrag && this.tile.set({
                x: this.tileX + this.deltaX,
                y: this.tileY + this.deltaY
            })), stopEvent(b);
        },
        end: function(a, b) {
            var c = this.zone && this.zone.tile ? this.zone.tile : null;
            this.started && (c && c.dropOut(b, this), this.handler.dragEnd(b, this), c && (this.committed = c.dropCommit(b, this)), 
            this.autodrag && this.tile instanceof d.Dragger && (this.copyable || this.committed ? this.tile.close() : this.restorable && this.tile.dragRestore()), 
            a.set("cover")), textSelection(!0), c && c.dropFinish(b, this), this.handler.dragFinish(b, this);
        },
        prepTile: function(a, c) {
            return isJQuery(c) ? c = {
                type: d.Dragger,
                spawner: this.origin,
                dragData: this
            } : isTile(c) && this.copyable && (c = c.get()), b.isObject(c) ? (c = a.addTile(c), 
            c.set("position", "offset"), this.tileX = c.x, this.tileY = c.y, c) : null;
        },
        zoneInit: function(a, c, d) {
            if (this.drop && this != c.tile && this.dropInit(a, c)) {
                var e = this.$el.offset(), f = this.$el.css("zIndex");
                if (parseInt(f)) {
                    var g = this.$el.css("position");
                    ("relative" == g || "absolute" == g) && (d = (d ? d + "." : "") + f);
                }
                c.zones.push({
                    tile: this,
                    t: e.top,
                    l: e.left,
                    r: e.left + this.$el.outerWidth(),
                    b: e.top + this.$el.outerHeight(),
                    z: d
                });
            } else b.each(this.childViews, function(b) {
                h.prototype.zoneInit.call(b, a, c, d);
            });
        },
        inZone: function(a, b, c) {
            return a && b >= a.l && b <= a.r && c >= a.t && c <= a.b;
        },
        changeZone: function(a) {
            var b = this.findZone(a.pageX, a.pageY);
            return this.zone && this.zone.tile == b.tile || (this.zone && this.zone.tile && this.zone.tile.dropOut(a, this), 
            b && b.tile && b.tile.dropOver(a, this)), b;
        },
        findZone: function(a, b) {
            for (var c = BIG, d = BIG, e = BIG, f = BIG, g = null, h = 0, i = this.zones.length; i > h; h++) {
                var j, k, l = this.zones[h], m = 0;
                (k = a - l.l) > 0 ? (j = l.r - a) > 0 ? (c > k && (c = k), d > j && (d = j), m++) : c > -j && (c = -j) : d > -k && (d = -k), 
                (k = b - l.t) > 0 ? (j = l.b - b) > 0 ? (e > k && (e = k), f > j && (f = j), m++) : e > -j && (e = -j) : f > -k && (f = -k), 
                2 != m || g && !this.isAbove(l.z, g.z) || (g = l);
            }
            return {
                drop: g,
                tile: g ? g.tile : null,
                l: a - c,
                r: a + d,
                t: b - e,
                b: b + f
            };
        },
        isAbove: function(a, b) {
            if (!b) return !0;
            if (!a) return !1;
            for (var c = a.split("."), d = b.split("."), e = c.length < d.length ? c.length : d.length, f = 0; e > f; f++) if (parseInt(c[f]) < parseInt(d[f])) return !1;
            return !0;
        }
    }, d.View = View = c.View.extend({
        type: null,
        className: "tile",
        optionSchema: d.Schema({
            views: {
                adapter: "setter"
            },
            model: {
                adapter: "property",
                isPrivate: !0
            },
            collection: {
                adapter: "property",
                isPrivate: !0
            },
            innerWidth: {
                adapter: "options",
                flowFlags: FLOW_SIZED,
                isPrivate: !0,
                defaultValue: 0
            },
            innerHeight: {
                adapter: "options",
                flowFlags: FLOW_SIZED,
                isPrivate: !0,
                defaultValue: 0
            },
            padWidth: {
                adapter: "options",
                flowFlags: FLOW_SIZED,
                isPrivate: !0,
                defaultValue: 0
            },
            padHeight: {
                adapter: "options",
                flowFlags: FLOW_SIZED,
                isPrivate: !0,
                defaultValue: 0
            }
        }),
        optionBuffer: null,
        options: null,
        parentView: null,
        childViews: null,
        flowViews: null,
        flowFlags: 0,
        flowJobs: 0,
        childType: null,
        _styleHash: null,
        _isRunning: !0,
        initialize: function() {
            this.optionSchema.initOptions(this);
        },
        close: function() {
            this._isRunning && (this._isRunning = !1, this.type = null, d.reflow.block(), this.detachThis(), 
            this.setViews(), d.reflow.unblock());
        },
        _configure: function(a) {
            this.options && (a = b.extend({}, this.options, a));
            for (var c = 0, d = e.length; d > c; c++) {
                var f = e[c];
                a[f] && (this[f] = a[f], delete a[f]);
            }
            this.optionBuffer = a, this.options = {}, this.childViews = [];
        },
        _ensureElement: function() {
            this.el || (this.el = document.createElement(this.tagName)), this.el.className = this.className, 
            this.setElement(this.el, !1), this.$el.attr("id", this.cid).data("tile", this);
        },
        superFn: function(a, b) {
            var c = this.parentView;
            if (c && a in c) {
                var d = g.call(arguments, 2);
                return c[a].apply(c, d);
            }
            return b;
        },
        logTree: function(a) {
            if (a || (a = 1), console.log(emptyStr(a) + this.cid + " (" + this.type + ")"), 
            "dash/widget" != this.type) for (var b = 0, c = this.childViews.length; c > b; b++) this.childViews[b].logTree(a + 2);
        },
        getViews: function() {
            return b.map(this.childViews, function(a) {
                return a.get();
            });
        },
        setViews: function(a) {
            var b;
            for (d.reflow.block(); b = this.childViews.pop(); ) b.close();
            this.addView(a), d.reflow.unblock();
        },
        childCount: function() {
            return this.childViews.length;
        },
        viewAt: function(a) {
            return this.childViews[a];
        },
        indexOf: function(a) {
            return b.indexOf(this.childViews, a);
        },
        addView: function(a, c, e) {
            if (d.reflow.block(), b.isArray(a)) for (var f = 0, g = a.length; g > f; f++) this._attachView(this._toView(a[f], e), c); else this._attachView(this._toView(a, e), c);
            d.reflow.unblock();
        },
        _attachView: function(a, b) {
            void 0 === b && (b = this.childViews.length), this._attachDOM(a, b), this.childViews.splice(b, 0, a), 
            a.parentView = this, a.el.removeAttribute("style"), a.optionSchema.initOptions(a, !0), 
            this.childSetup(a), a.localSetup(this), a.setFlag(FLOW_ADDED);
        },
        _attachDOM: function(a, b) {
            var c = this.childViews.length;
            a.el != this.el && (b >= c || void 0 === b ? this.$el.append(a.$el) : 0 == b ? this.$el.prepend(a.$el) : (0 > b && (b = c - b), 
            this.$el.children().eq(b).before(a.$el)));
        },
        _toView: function(a, c) {
            var e;
            return a instanceof View ? (a.detachThis(), a.set(c), a) : (b.isFunction(a) ? (e = a, 
            a = c) : (b.isObject(a) || (a = {
                type: a
            }), b.isObject(c) && (a = b.extend({}, a, c)), void 0 === a.type && (a.type = this.childType), 
            e = d.Views[a.type] || a.type, b.isFunction(e) || (e = d.Loader)), a = new e(a), 
            a.scheduleJob(JOB_RENDER), a);
        },
        detachThis: function() {
            this.parentView && this.parentView.detachView(this);
        },
        detachView: function(a) {
            a.parentView = null, a.$el.detach(), this.childViews = b.without(this.childViews, a), 
            this.setFlag(FLOW_VIEWS);
        },
        replaceWith: function(a) {
            if (this.parentView) {
                d.reflow.block();
                var b = this.parentView.indexOf(this);
                this.parentView.addView(a, b), this.detachThis(), d.reflow.unblock();
            }
        },
        findView: function(a) {
            for (var b = this.childViews.length, c = this.cid == a ? this : void 0, d = 0; b > d && !c; d++) c = this.childViews[d].findView(a);
            return c;
        },
        childSetup: function() {},
        localSetup: function() {},
        setFlag: function(a, b) {
            a && (this.flowFlags |= a, b || d.reflow.schedule(JOB_TRACE, this));
        },
        scheduleJob: function(a) {
            d.reflow.schedule(a, this);
        },
        set: function(a, b) {
            d.reflow.block();
            var c = a ? this.optionSchema.setOptions(this, a) : 0;
            return c && !b && d.reflow.schedule(JOB_TRACE, this), d.reflow.unblock(), c;
        },
        get: function(a) {
            return this.optionSchema.get(this, a);
        },
        renderView: function() {
            this.render(), this.setFlag(FLOW_RENDERED);
        },
        presizeView: function() {
            this.parentView && this.parentView.presizeChild(this);
        },
        presizeChild: function() {},
        traceView: function() {
            this.flowFlags & STYLED_ADDED && this.measurePad(), this.parentView && (this.flowFlags & SUPER_ADDED && (this.parentView.flowFlags |= FLOW_VIEWS), 
            this.parentView.traceBubble(this, this, 1));
        },
        traceBubble: function(a, b, c) {
            this.flowFlags & FLOW_TRACED || (this.flowFlags |= FLOW_TRACED, this.flowViews ? this.flowViews.push(b) : this.flowViews = [ b ]), 
            this.traceChange(a, b, c), this.parentView && this.parentView.traceBubble(a, this, c + 1);
        },
        traceChange: function() {},
        flow: function(a) {
            this.set(a, !0), this.layout(), this.flowViews = null, this.flowFlags = 0;
        },
        layout: function() {
            for (var a = this.flowViews || this.childViews, b = 0, c = a.length; c > b; b++) this.views[b].flow();
        },
        measureView: function() {
            var a = d.dom.innerSize(this);
            return this.set(a, !0);
        },
        measurePad: function() {
            var a = this.styleHash(), b = d.dom.padSize(this, a);
            return this.set(b, !0);
        },
        styleHash: function() {
            if (!this._styleHash) {
                var a = this.parentView ? this.parentView.styleHash() : "";
                this._styleHash = a + "/" + this.tagName + ":" + this.className;
            }
            return this._styleHash;
        },
        setDrag: function(a) {
            this.$el.toggleClass("drag", this.options.drag = a);
        },
        dragInit: function() {},
        dragStart: function() {},
        dragMove: function() {},
        dragEnd: function() {},
        dragFinish: function() {},
        setDrop: function(a) {
            this.$el.toggleClass("drop", this.options.drop = a);
        },
        dropInit: function() {
            return !0;
        },
        dropOver: function() {},
        dropMove: function() {},
        dropOut: function() {},
        dropCommit: function() {
            return !0;
        },
        dropFinish: function() {},
        addEvent: function(a, b, c) {
            b = b.split(" ");
            for (var d = 0, e = b.length; e > d; d++) a.addEventListener(b[d], c, !0);
        },
        removeEvent: function(a, b, c) {
            b = b.split(" ");
            for (var d = 0, e = b.length; e > d; d++) a.removeEventListener(b[d], c, !0);
        }
    }), d.Dragger = d.View.extend({
        dragData: null,
        $source: null,
        sourceDisplay: "",
        optionSchema: d.View.prototype.optionSchema.extend({
            dragData: {
                adapter: "setter",
                isPrivate: !0
            }
        }),
        setDragData: function(a) {
            this.dragData = a, this.$source = a.tile, this.setElement(this.$source.clone().removeAttr("id").css("display", "block")), 
            a.copyable ? this.$source = null : a.restorable ? (this.sourceDisplay = this.$source.css("display"), 
            this.$source.css("display", "none")) : (this.$source.remove(), this.$source = null), 
            this.setDrag(!0);
        },
        dragInit: function(a, b) {
            return b.handler;
        },
        dragRestore: function() {
            this.$source.css("display", this.sourceDisplay), this.$source = null, this.close();
        },
        close: function() {
            this.$source && this.$source.remove(), this.$source = null, this.dragData = null, 
            Dash.Tile.prototype.close.apply(this, arguments);
        }
    }), d.Loader = d.View.extend({
        initialize: function(a) {
            var b = this;
            require([ "tile!" + a.type ], function() {
                b.replaceWith(a);
            }, function(c) {
                a.error = c, b.replaceWith(new d.Error(a));
            });
        }
    }), d.Error = d.View.extend({
        className: "error",
        initialize: function(a) {
            this.error = a.error;
        },
        render: function() {
            return console.log("Require Loading Error:", this.error), this.$el.html([ "<li><h2>Load Error!</h2></li>", "<li>Type: ", this.error.type, "</li>", "<li>Name: ", this.error.name, "</li>", "<li>Path: ", this.error.path, "</li>" ].join("")), 
            this;
        }
    }), d;
});